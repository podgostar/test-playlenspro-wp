{"version":3,"file":"static/js/44.8e18aa2d.chunk.js","mappings":"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","sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/send/send.js","common/utils/useForm.tsx","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { useState } from \"react\";\r\nimport emailjs from 'emailjs-com';\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    \r\n    const formData = new FormData(e.target as HTMLFormElement);\r\n    const values = Object.fromEntries(formData.entries());\r\n  \r\n    try {\r\n \r\n      const response = await emailjs.send(\r\n        'service_s1boq0d',    // Replace with your service ID from EmailJS\r\n        'template_9nxwx1x',   // Replace with your template ID from EmailJS\r\n        {\r\n          name: values.name,\r\n          email: values.email,\r\n          message: values.message,\r\n        },               // Form values\r\n        'RNNa1m6YXQvsNTATF'        // Replace with your user ID from EmailJS\r\n      );\r\n\r\n      \r\n      if (response.status === 200) {\r\n        alert('Your message has been sent!');\r\n      } else {\r\n        alert('Error sending message.');\r\n      }\r\n    } catch (error) {\r\n      alert('An error occurred. Please try again later.');\r\n      console.error('Error sending email:', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nconst Block = ({ title, content }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{title}</h6>\r\n      <TextWrapper>\r\n        <Content>{content}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Block;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{name}</Label>\r\n    <StyledInput\r\n      placeholder={placeholder}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default Input;\r\n","import { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\n// Adjusted Contact component without the translation function (t)\r\nconst Contact = ({ title, content, id }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"Name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                {/* <ValidationType type=\"name\" /> */}\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">Submit</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","initialValues","name","email","message","Content","styled","Container","TextWrapper","title","content","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","values","errors","handleChange","handleSubmit","validate","formState","setFormState","useState","event","persist","value","prevState","async","e","preventDefault","formData","FormData","fromEntries","entries","emailjs","alert","error","console","useForm","ValidationType","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}